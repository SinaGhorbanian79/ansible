---

- name: Pull image in remote server and push it to private registry
  hosts: docker_hosts
  become: true
  tasks:

    - name: Pull the image
      community.docker.docker_image:
        name: "{{ source_image }}"
        source: pull
      register: pull_result

    - name: Pull the image result
      ansible.builtin.debug:
        msg: >
          {% if pull_result.changed %}
            The image '{{ source_image }}' didn't exist and was pulled.
          {% else %}
            The image '{{ source_image }}' already existed.
          {% endif %}
          Result: {{ pull_result }}

    - name: Log in to the private registry
      community.docker.docker_login:
        registry_url: '{{ dest_image }}'
        username: '{{ username }}'
        password: '{{ password }}'
      ignore_errors: true

    - name: Tag and push image to target registry
      community.docker.docker_image:
        name: "{{ source_image }}"
        repository: "{{ dest_image }}"
        push: true
        source: local
      register: tag_push_result
      ignore_errors: true

    - name: Tag and push image to target registry result
      ansible.builtin.debug:
        msg: >
          {% if tag_push_result is succeeded or tag_push_result.changed %}
            Image '{{ source_image }}' was tagged and pushed to '{{ dest_image }}'.
          {% else %}
            Couldn't tag or push image
          {% endif %}
          Result: {{ tag_push_result }}
      ignore_errors: true

    - name: Delete the source Docker image
      community.docker.docker_image:
        name: "{{ source_image }}"
        state: absent
      register: source_image_delete_result
      when: pull_result.changed
      ignore_errors: true

    - name: Delete the source Docker image result
      ansible.builtin.debug:
        msg: >
          {% if source_image_delete_result.changed %}
            Removed image '{{ source_image }}'
          {% else %}
            Image '{{ source_image }}' was already present so it won't be removed
          {% endif %}
          Result: {{ source_image_delete_result }}
      when: source_image_delete_result is defined
      ignore_errors: true

    - name: Delete the dest Docker image
      community.docker.docker_image:
        name: "{{ dest_image }}"
        state: absent
      register: dest_image_delete_result
      ignore_errors: true

    - name: Delete the dest Docker image result
      ansible.builtin.debug:
        msg: >
          {% if dest_image_delete_result.changed %}
            Removed image '{{ dest_image }}'
          {% else %}
            Couldn't delete image '{{ dest_image }}'
          {% endif %}
          Result: {{ dest_image_delete_result }}
