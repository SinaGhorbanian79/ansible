---
- name: Pull image in remote server and push it to private registry
  hosts: docker_hosts
  become: true
  tasks:

    - name: Check if image already exists
      community.docker.docker_image_info:
        name: docker.arvancloud.ir/docker:27.3-dind
      register: dind_image_info
      ignore_errors: true

    - name: Check_result
      ansible.builtin.debug:
        msg: >
          {% if dind_image_info is not defined or dind_image_info.images | length == 0 %}
            the dind image doesn't exists
          {% else %}
            the dind image exists
          {% endif %}
      ignore_errors: true

    - name: Set exists variable
      ansible.builtin.set_fact:
        exists: "{{ (dind_image_info.images | length == 0) | ternary('0', '1') | trim }}"
      ignore_errors: true

    - name: Pull Docker-in-Docker image
      community.docker.docker_image:
        name: docker.arvancloud.ir/docker:27.3-dind
        source: pull
      register: dind_pull_result
      when: exists == "0"
      ignore_errors: true

    - name: Pull Docker-in-Docker image result
      ansible.builtin.debug:
        msg: "{{ dind_pull_result }}"
      when: exists == "0"
      ignore_errors: true

    - name: Create a dind container
      community.docker.docker_container:
        name: docker_in_docker_for_image_push
        image: docker.arvancloud.ir/docker:27.3-dind
        state: started
        privileged: true
      register: dind_create_result
      ignore_errors: true

    - name: Create a dind container result
      ansible.builtin.debug:
        msg: "{{ dind_create_result }}"
      ignore_errors: true

    - name: Wait for Docker daemon to become ready
      ansible.builtin.command: docker exec docker_in_docker_for_image_push docker ps
      register: result
      until: result.rc == 0
      retries: 10
      delay: 3
      ignore_errors: true

    - name: Pull the desired image inside Docker-in-Docker
      ansible.builtin.command: >
        docker exec docker_in_docker_for_image_push docker image pull {{ source_image }}
      register: source_pull_result
      ignore_errors: true

    - name: Source pull result
      ansible.builtin.debug:
        msg: "{{ source_pull_result }}"
      ignore_errors: true

    - name: Tag the image for the new repository
      ansible.builtin.command: >
        docker exec docker_in_docker_for_image_push docker tag {{ source_image }} {{ dest_image }}
      register: tag_image_result
      ignore_errors: true

    - name: Tag image result
      ansible.builtin.debug:
        msg: "{{ tag_image_result }}"
      ignore_errors: true

    - name: Login to registry
      ansible.builtin.shell: >
        echo "{{ password }}" | docker exec -i docker_in_docker_for_image_push docker login --username {{ username }} --password-stdin {{ dest_image }}
      register: docker_login_result
      ignore_errors: true

    - name: Docker login result
      ansible.builtin.debug:
        msg: "{{ docker_login_result }}"
      ignore_errors: true

    - name: Push the image to the new repository
      ansible.builtin.command: >
        docker exec docker_in_docker_for_image_push docker push {{ dest_image }}
      register: dest_push_result
      ignore_errors: true

    - name: Dest push result
      ansible.builtin.debug:
        msg: "{{ dest_push_result }}"
      ignore_errors: true

    - name: Stop and remove Docker-in-docker_in_docker_for_image_push container
      community.docker.docker_container:
        name: docker_in_docker_for_image_push
        state: absent
      ignore_errors: true

    - name: Delete the dind Docker image
      community.docker.docker_image:
        name: docker.arvancloud.ir/docker:27.3-dind
        state: absent
      register: dind_image_delete_result
      when: exists == "0"
      ignore_errors: true

    - name: Delete the dind docker image result
      ansible.builtin.debug:
        msg: "{{ dind_image_delete_result }}"
      when: exists == "0"
